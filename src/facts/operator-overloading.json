{
  "id": "operator-overloading",
  "title": "Operator Overloading: Magic Methods",
  "shortDescription": "Python allows you to define how operators work with your custom classes using magic methods!",
  "detailedDescription": "Python's operator overloading lets you define how built-in operators (+, -, *, ==, etc.) work with your custom classes by implementing special methods (also called magic methods or dunder methods). This makes your classes behave like built-in types and creates more intuitive APIs.",
  "examples": [
    "class Vector:",
    "    def __init__(self, x, y):",
    "        self.x = x",
    "        self.y = y",
    "    ",
    "    def __add__(self, other):",
    "        return Vector(self.x + other.x, self.y + other.y)",
    "    ",
    "    def __sub__(self, other):",
    "        return Vector(self.x - other.x, self.y - other.y)",
    "    ",
    "    def __mul__(self, scalar):",
    "        return Vector(self.x * scalar, self.y * scalar)",
    "    ",
    "    def __eq__(self, other):",
    "        return self.x == other.x and self.y == other.y",
    "    ",
    "    def __repr__(self):",
    "        return f'Vector({self.x}, {self.y})'",
    "    ",
    "    def __len__(self):",
    "        return int((self.x ** 2 + self.y ** 2) ** 0.5)",
    "",
    "# Usage",
    "v1 = Vector(2, 3)",
    "v2 = Vector(1, 4)",
    "",
    "print(v1 + v2)    # Vector(3, 7)",
    "print(v1 - v2)    # Vector(1, -1)",
    "print(v1 * 2)     # Vector(4, 6)",
    "print(v1 == v2)   # False",
    "print(len(v1))    # 3",
    "",
    "# Other useful magic methods:",
    "# __getitem__, __setitem__ - indexing",
    "# __call__ - make object callable",
    "# __enter__, __exit__ - context manager",
    "# __iter__, __next__ - iteration"
  ],
  "links": [
    {
      "title": "Python Magic Methods",
      "url": "https://docs.python.org/3/reference/datamodel.html#special-method-names"
    }
  ]
}