{
  "id": "async-await",
  "title": "Async/Await: Asynchronous Programming",
  "shortDescription": "Python's async/await enables efficient concurrent programming for I/O-bound tasks!",
  "detailedDescription": "Python 3.5+ supports asynchronous programming with async/await syntax. This allows you to write concurrent code that can handle multiple I/O operations efficiently without blocking. Async programming is especially useful for web scraping, API calls, file operations, and network programming.",
  "examples": [
    "import asyncio",
    "import aiohttp",
    "",
    "# Basic async function",
    "async def say_hello():",
    "    print('Hello')",
    "    await asyncio.sleep(1)  # Non-blocking sleep",
    "    print('World')",
    "",
    "# Running async function",
    "# asyncio.run(say_hello())",
    "",
    "# Concurrent execution",
    "async def fetch_data(url):",
    "    async with aiohttp.ClientSession() as session:",
    "        async with session.get(url) as response:",
    "            return await response.text()",
    "",
    "async def main():",
    "    urls = [",
    "        'https://httpbin.org/delay/1',",
    "        'https://httpbin.org/delay/2',",
    "        'https://httpbin.org/delay/3'",
    "    ]",
    "    ",
    "    # Run concurrently",
    "    tasks = [fetch_data(url) for url in urls]",
    "    results = await asyncio.gather(*tasks)",
    "    return results",
    "",
    "# Async context manager",
    "class AsyncResource:",
    "    async def __aenter__(self):",
    "        print('Acquiring resource')",
    "        return self",
    "    ",
    "    async def __aexit__(self, exc_type, exc_val, exc_tb):",
    "        print('Releasing resource')",
    "",
    "async def use_resource():",
    "    async with AsyncResource() as resource:",
    "        await asyncio.sleep(1)"
  ],
  "links": [
    {
      "title": "Python Asyncio",
      "url": "https://docs.python.org/3/library/asyncio.html"
    }
  ]
}