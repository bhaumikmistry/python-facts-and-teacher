{
  "id": "function-annotations",
  "title": "Function Annotations and Type Hints",
  "shortDescription": "Python supports optional type hints that make code more readable and enable better tooling!",
  "detailedDescription": "Python 3.5+ supports type hints that allow you to specify the expected types of function parameters and return values. While Python remains dynamically typed and doesn't enforce these hints at runtime, they improve code readability and enable powerful static analysis tools like mypy.",
  "examples": [
    "# Function with type hints",
    "def greet(name: str, age: int) -> str:",
    "    return f'Hello {name}, you are {age} years old'",
    "",
    "# Type hints for variables",
    "from typing import List, Dict, Optional",
    "",
    "numbers: List[int] = [1, 2, 3, 4, 5]",
    "user_data: Dict[str, str] = {'name': 'Alice', 'city': 'NYC'}",
    "optional_value: Optional[str] = None",
    "",
    "# Complex type hints",
    "from typing import Union, Callable",
    "",
    "def process_data(data: Union[str, int]) -> bool:",
    "    return isinstance(data, (str, int))",
    "",
    "# Function that takes another function",
    "def apply_func(func: Callable[[int], int], value: int) -> int:",
    "    return func(value)"
  ],
  "links": [
    {
      "title": "Python Type Hints",
      "url": "https://docs.python.org/3/library/typing.html"
    }
  ]
}