{
  "id": "duck-typing",
  "title": "Duck Typing",
  "shortDescription": "If it walks like a duck and quacks like a duck, then it's a duck!",
  "detailedDescription": "Python uses duck typing - an object's suitability is determined by the presence of certain methods and properties, rather than the object's type itself. This makes Python very flexible and allows for polymorphism without inheritance.",
  "examples": [
    "# Duck typing example",
    "class Duck:",
    "    def quack(self): return 'Quack!'",
    "",
    "class Person:",
    "    def quack(self): return 'I can quack too!'",
    "",
    "def make_it_quack(thing):",
    "    return thing.quack()  # Works with any object that has quack()",
    "",
    "make_it_quack(Duck())    # Quack!",
    "make_it_quack(Person())  # I can quack too!"
  ],
  "links": [
    {
      "title": "Duck Typing Explained",
      "url": "https://realpython.com/lessons/duck-typing/"
    }
  ]
}